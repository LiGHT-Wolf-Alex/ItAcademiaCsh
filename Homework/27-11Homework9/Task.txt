ДЗ 9. Разработка иерархии классов транспортных средств
Разработать иерархию классов для различных типов транспортных средств, демонстрируя принципы наследования и полиморфизма в ООП.

ЗАДАНИЕ 1

1. Базовый класс Vehicle:
* Определить базовый класс Vehicle с базовыми характеристиками, такими как вес, максимальная скорость.
* Создать виртуальный метод DisplayInfo(), который выводит общую информацию о транспортном средстве.

2. Производный класс Car:
* Унаследовать класс Car от Vehicle.
* Добавить специфические характеристики, такие как количество дверей и тип топлива.
* Переопределить метод DisplayInfo() с использованием override, чтобы включить дополнительные детали специфичные для автомобилей.

3. Производный класс Truck:
* Унаследовать класс Truck от Vehicle.
Добавить уникальные характеристики, например, грузоподъемность.
Переопределить метод DisplayInfo() с использованием override, включив информацию о грузоподъемности.

4. Производный класс ElectricCar:
* Унаследовать Electric от Car.
Добавить характеристики, как дальность хода на одном заряде, заряд автомобиля.
Использовать ключевое слово new для метода DisplayInfo(), чтобы полностью изменить реализацию метода для электромобилей (например, добавить информацию о батарее).

Задача:
Исследуйте поведение метода DisplayInfo() при вызове через ссылку на базовый класс и через ссылку на производный класс, чтобы продемонстрировать полиморфизм и различие между override и new.

В этой задаче можно прямо в методе DisplayInfo выводить текст в консоль.

ЗАДАНИЕ 2
Создать систему для управления разнообразными мультимедийными устройствами, демонстрируя использование интерфейсов для обеспечения единого способа взаимодействия с различными устройствами.

* Создайте интерфейс IMultimediaDevice, который будет содержать методы, общие для всех мультимедийных устройств, такие как Play(), Stop(), Pause(), Next(), IncreaseVolume() и DecreaseVolume().
* Создайте несколько классов, представляющих различные мультимедийные устройства, такие как MP3Player, DVDPlayer, и Radio.
* Реализуйте в каждом из этих классов интерфейс IMultimediaDevice и предоставьте конкретные реализации для его методов.
* Создайте метод, который принимает интерфейс IMultimediaDevice и управляет устройством, вызывая его методы.
* Реализуйте логику для создания и управления списком подключенных мультимедийных устройств, позволяя пользователю выбирать, какое устройство использовать для воспроизведения.


 public float GetWeight()
    {
        return _weight;
    } 
    
    public int GetMaxSpeed()
    {
        return _maxSpeed;
    }